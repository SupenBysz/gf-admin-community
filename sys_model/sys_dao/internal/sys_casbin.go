// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SysCasbinDao is the data access object for table sys_casbin.
type SysCasbinDao struct {
	dao_interface.IDao
	table       string           // table is the underlying table name of the DAO.
	group       string           // group is the database configuration group name of current DAO.
	columns     SysCasbinColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// SysCasbinColumns defines and stores column names for table sys_casbin.
type SysCasbinColumns struct {
	Ptype string //
	V0    string //
	V1    string //
	V2    string //
	V3    string //
	V4    string //
	V5    string //
}

// sysCasbinColumns holds the columns for table sys_casbin.
var sysCasbinColumns = SysCasbinColumns{
	Ptype: "ptype",
	V0:    "v0",
	V1:    "v1",
	V2:    "v2",
	V3:    "v3",
	V4:    "v4",
	V5:    "v5",
}

// NewSysCasbinDao creates and returns a new DAO object for table data access.
func NewSysCasbinDao(proxy ...dao_interface.IDao) *SysCasbinDao {
	var dao *SysCasbinDao
	if len(proxy) > 0 {
		dao = &SysCasbinDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     sysCasbinColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &SysCasbinDao{
		group:   "default",
		table:   "sys_casbin",
		columns: sysCasbinColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SysCasbinDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SysCasbinDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SysCasbinDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SysCasbinDao) Columns() SysCasbinColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SysCasbinDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SysCasbinDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SysCasbinDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *SysCasbinDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *SysCasbinDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *SysCasbinDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *SysCasbinDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
