// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SysAuditDao is the data access object for table sys_audit.
type SysAuditDao struct {
	dao_interface.IDao
	table       string          // table is the underlying table name of the DAO.
	group       string          // group is the database configuration group name of current DAO.
	columns     SysAuditColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// SysAuditColumns defines and stores column names for table sys_audit.
type SysAuditColumns struct {
	Id             string //
	State          string // 审核状态：-1不通过，0待审核，1通过
	Reply          string // 不通过时回复的审核不通过原因
	UnionMainId    string // 关联主体ID
	Category       string // 业务类别：1个人资质审核、2主体资质审核、4数据审核
	AuditData      string // 待审核的业务数据包
	ExpireAt       string // 服务时限
	AuditReplyAt   string // 审核回复时间
	HistoryItems   string // 历史申请记录
	CreatedAt      string //
	AuditUserId    string // 审核操作者id
	DataIdentifier string // 数据标识
	UserId         string // 关联用户ID
	Summary        string // 概述
}

// sysAuditColumns holds the columns for table sys_audit.
var sysAuditColumns = SysAuditColumns{
	Id:             "id",
	State:          "state",
	Reply:          "reply",
	UnionMainId:    "union_main_id",
	Category:       "category",
	AuditData:      "audit_data",
	ExpireAt:       "expire_at",
	AuditReplyAt:   "audit_reply_at",
	HistoryItems:   "history_Items",
	CreatedAt:      "created_at",
	AuditUserId:    "audit_user_id",
	DataIdentifier: "data_identifier",
	UserId:         "user_id",
	Summary:        "summary",
}

// NewSysAuditDao creates and returns a new DAO object for table data access.
func NewSysAuditDao(proxy ...dao_interface.IDao) *SysAuditDao {
	var dao *SysAuditDao
	if len(proxy) > 0 {
		dao = &SysAuditDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     sysAuditColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &SysAuditDao{
		group:   "default",
		table:   "sys_audit",
		columns: sysAuditColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SysAuditDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SysAuditDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SysAuditDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SysAuditDao) Columns() SysAuditColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SysAuditDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SysAuditDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SysAuditDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *SysAuditDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *SysAuditDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *SysAuditDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *SysAuditDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
