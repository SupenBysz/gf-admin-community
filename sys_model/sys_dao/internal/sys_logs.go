// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SysLogsDao is the data access object for table sys_logs.
type SysLogsDao struct {
	dao_interface.IDao
	table       string         // table is the underlying table name of the DAO.
	group       string         // group is the database configuration group name of current DAO.
	columns     SysLogsColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// SysLogsColumns defines and stores column names for table sys_logs.
type SysLogsColumns struct {
	Id        string // ID
	UserId    string // 用户UID
	Error     string // 错误信息
	Category  string // 分类
	Level     string // 等级
	Content   string // 日志内容
	Context   string // 上下文数据
	CreatedAt string //
	UpdatedAt string //
}

// sysLogsColumns holds the columns for table sys_logs.
var sysLogsColumns = SysLogsColumns{
	Id:        "id",
	UserId:    "user_id",
	Error:     "error",
	Category:  "category",
	Level:     "level",
	Content:   "content",
	Context:   "context",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// NewSysLogsDao creates and returns a new DAO object for table data access.
func NewSysLogsDao(proxy ...dao_interface.IDao) *SysLogsDao {
	var dao *SysLogsDao
	if len(proxy) > 0 {
		dao = &SysLogsDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     sysLogsColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &SysLogsDao{
		group:   "default",
		table:   "sys_logs",
		columns: sysLogsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SysLogsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SysLogsDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SysLogsDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SysLogsDao) Columns() SysLogsColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SysLogsDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SysLogsDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SysLogsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *SysLogsDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *SysLogsDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *SysLogsDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *SysLogsDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
