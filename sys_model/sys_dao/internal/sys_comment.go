// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SysCommentDao is the data access object for table sys_comment.
type SysCommentDao struct {
	dao_interface.IDao
	table       string            // table is the underlying table name of the DAO.
	group       string            // group is the database configuration group name of current DAO.
	columns     SysCommentColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// SysCommentColumns defines and stores column names for table sys_comment.
type SysCommentColumns struct {
	Id            string // ID
	UserId        string // 用户ID
	UnionMainId   string // 关联主体ID
	UnionMainType string // 关联主体类型
	Body          string // 图文评论
	MediaIds      string // 媒体资源：图文、视频等
	ReplyId       string // 评论回复信息ID，即关联父级评论ID
	Score         string // 评分0-5，间隔0.1
	CreatedAt     string // 评论发表时间
	UnionId       string // 关联业务ID
}

// sysCommentColumns holds the columns for table sys_comment.
var sysCommentColumns = SysCommentColumns{
	Id:            "id",
	UserId:        "user_id",
	UnionMainId:   "union_main_id",
	UnionMainType: "union_main_type",
	Body:          "body",
	MediaIds:      "media_ids",
	ReplyId:       "reply_id",
	Score:         "score",
	CreatedAt:     "created_at",
	UnionId:       "union_id",
}

// NewSysCommentDao creates and returns a new DAO object for table data access.
func NewSysCommentDao(proxy ...dao_interface.IDao) *SysCommentDao {
	var dao *SysCommentDao
	if len(proxy) > 0 {
		dao = &SysCommentDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     sysCommentColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &SysCommentDao{
		group:   "default",
		table:   "sys_comment",
		columns: sysCommentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SysCommentDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SysCommentDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SysCommentDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SysCommentDao) Columns() SysCommentColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SysCommentDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SysCommentDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SysCommentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *SysCommentDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *SysCommentDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *SysCommentDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *SysCommentDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
