// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/SupenBysz/gf-admin-community/utility/daoctl"
	"github.com/SupenBysz/gf-admin-community/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SmsTemplateConfigDao is the data access object for table sms_template_config.
type SmsTemplateConfigDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns SmsTemplateConfigColumns // columns contains all the column names of Table for convenient usage.
}

// SmsTemplateConfigColumns defines and stores column names for table sms_template_config.
type SmsTemplateConfigColumns struct {
	Id                   string // ID
	SignName             string // 签名名称
	TemplateNo           string // 模版编号
	TemplateName         string // 模版名称
	TemplateContent      string // 模版内容
	ThirdPartyTemplateNo string // 第三方模版编号
	ProviderNo           string // 渠道商编号
	Remark               string // 备注
	Status               string // 状态
	CreatedAt            string //
	UpdatedAt            string //
	DeletedAt            string //
}

// smsTemplateConfigColumns holds the columns for table sms_template_config.
var smsTemplateConfigColumns = SmsTemplateConfigColumns{
	Id:                   "id",
	SignName:             "sign_name",
	TemplateNo:           "template_no",
	TemplateName:         "template_name",
	TemplateContent:      "template_content",
	ThirdPartyTemplateNo: "third_party_template_no",
	ProviderNo:           "provider_no",
	Remark:               "remark",
	Status:               "status",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	DeletedAt:            "deleted_at",
}

// NewSmsTemplateConfigDao creates and returns a new DAO object for table data access.
func NewSmsTemplateConfigDao(proxy ...dao_interface.IDao) *SmsTemplateConfigDao {
	var dao *SmsTemplateConfigDao
	if proxy != nil {
		dao = &SmsTemplateConfigDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: smsTemplateConfigColumns,
		}
		return dao
	}

	return &SmsTemplateConfigDao{
		group:   "default",
		table:   "sms_template_config",
		columns: smsTemplateConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SmsTemplateConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SmsTemplateConfigDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SmsTemplateConfigDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SmsTemplateConfigDao) Columns() SmsTemplateConfigColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SmsTemplateConfigDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SmsTemplateConfigDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SmsTemplateConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
