// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SysDeliveryCompanyDao is the data access object for table sys_delivery_company.
type SysDeliveryCompanyDao struct {
	dao_interface.IDao
	table       string                    // table is the underlying table name of the DAO.
	group       string                    // group is the database configuration group name of current DAO.
	columns     SysDeliveryCompanyColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// SysDeliveryCompanyColumns defines and stores column names for table sys_delivery_company.
type SysDeliveryCompanyColumns struct {
	Id                       string //
	Name                     string // 物流公司
	Logo                     string // LOGO
	Site                     string // 网址
	ExpressNo                string // 物流跟踪编号
	ExpressNoElectronicSheet string // 电子面单编号
	PrintStyleJson           string // 打印模板样式
	ExpTypeJson              string // 业务类型
	UpdatedAt                string //
	CreatedAt                string //
}

// sysDeliveryCompanyColumns holds the columns for table sys_delivery_company.
var sysDeliveryCompanyColumns = SysDeliveryCompanyColumns{
	Id:                       "id",
	Name:                     "name",
	Logo:                     "logo",
	Site:                     "site",
	ExpressNo:                "express_no",
	ExpressNoElectronicSheet: "express_no_electronic_sheet",
	PrintStyleJson:           "print_style_json",
	ExpTypeJson:              "exp_type_json",
	UpdatedAt:                "updated_at",
	CreatedAt:                "created_at",
}

// NewSysDeliveryCompanyDao creates and returns a new DAO object for table data access.
func NewSysDeliveryCompanyDao(proxy ...dao_interface.IDao) *SysDeliveryCompanyDao {
	var dao *SysDeliveryCompanyDao
	if len(proxy) > 0 {
		dao = &SysDeliveryCompanyDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     sysDeliveryCompanyColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &SysDeliveryCompanyDao{
		group:   "default",
		table:   "sys_delivery_company",
		columns: sysDeliveryCompanyColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SysDeliveryCompanyDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SysDeliveryCompanyDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SysDeliveryCompanyDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SysDeliveryCompanyDao) Columns() SysDeliveryCompanyColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SysDeliveryCompanyDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SysDeliveryCompanyDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SysDeliveryCompanyDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *SysDeliveryCompanyDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *SysDeliveryCompanyDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *SysDeliveryCompanyDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *SysDeliveryCompanyDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
