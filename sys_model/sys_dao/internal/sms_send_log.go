// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/SupenBysz/gf-admin-community/utility/daoctl"
	"github.com/SupenBysz/gf-admin-community/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SmsSendLogDao is the data access object for table sms_send_log.
type SmsSendLogDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns SmsSendLogColumns // columns contains all the column names of Table for convenient usage.
}

// SmsSendLogColumns defines and stores column names for table sms_send_log.
type SmsSendLogColumns struct {
	Id          string // ID
	AppNo       string // 应用ID
	BusinessNo  string // 业务编号
	Status      string // 状态
	Fee         string // 计价条数
	PhoneNumber string // 发送手机号
	Message     string // 接口响应消息
	Code        string // 接口响应状态码
	Content     string // 发送内容
	Remark      string // 备注
	CreatedAt   string //
	UpdatedAt   string //
	DeletedAt   string //
}

// smsSendLogColumns holds the columns for table sms_send_log.
var smsSendLogColumns = SmsSendLogColumns{
	Id:          "id",
	AppNo:       "app_no",
	BusinessNo:  "business_no",
	Status:      "status",
	Fee:         "fee",
	PhoneNumber: "phone_number",
	Message:     "message",
	Code:        "code",
	Content:     "content",
	Remark:      "remark",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

// NewSmsSendLogDao creates and returns a new DAO object for table data access.
func NewSmsSendLogDao(proxy ...dao_interface.IDao) *SmsSendLogDao {
	var dao *SmsSendLogDao
	if proxy != nil {
		dao = &SmsSendLogDao{
			group:   proxy[0].Group(),
			table:   proxy[0].Table(),
			columns: smsSendLogColumns,
		}
		return dao
	}

	return &SmsSendLogDao{
		group:   "default",
		table:   "sms_send_log",
		columns: smsSendLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SmsSendLogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SmsSendLogDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SmsSendLogDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SmsSendLogDao) Columns() SmsSendLogColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SmsSendLogDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SmsSendLogDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) dao_interface.DaoConfig {
	daoConfig := dao_interface.DaoConfig{
		Dao:   dao,
		DB:    dao.DB(),
		Table: dao.table,
		Group: dao.group,
		Model: dao.DB().Model(dao.Table()).Safe().Ctx(ctx),
	}

	if len(cacheOption) == 0 {
		daoConfig.CacheOption = daoctl.MakeDaoCache(dao.Table())
		daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
	} else {
		if cacheOption[0] != nil {
			daoConfig.CacheOption = cacheOption[0]
			daoConfig.Model = daoConfig.Model.Cache(*daoConfig.CacheOption)
		}
	}

	daoConfig.Model = daoctl.RegisterDaoHook(daoConfig.Model)

	return daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SmsSendLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
