// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/kysion/base-library/utility/daoctl"
	"github.com/kysion/base-library/utility/daoctl/dao_interface"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SysMessageDao is the data access object for table sys_message.
type SysMessageDao struct {
	dao_interface.IDao
	table       string            // table is the underlying table name of the DAO.
	group       string            // group is the database configuration group name of current DAO.
	columns     SysMessageColumns // columns contains all the column names of Table for convenient usage.
	daoConfig   *dao_interface.DaoConfig
	ignoreCache bool
	exWhereArr  []string
}

// SysMessageColumns defines and stores column names for table sys_message.
type SysMessageColumns struct {
	Id             string // ID
	Title          string // 标题
	Summary        string // 摘要
	Content        string // 内容
	Type           string // 消息类型
	Link           string // 跳转链接
	ToUserIds      string // 接收者UserIds，允许有多个接收者
	ToUserType     string // 接收者类型用户类型，和UserType保持一致
	FromUserId     string // 发送者ID，为-1代表系统消息
	FromUserType   string // 发送者类型
	SendAt         string // 发送时间
	ExtJson        string // 拓展数据Json
	ReadUserIds    string // 已读用户UserIds
	DataIdentifier string // 关联的数据标识
	CreatedAt      string //
	UpdatedAt      string //
	DeletedAt      string //
	SceneDesc      string // 场景描述
	SceneType      string // 场景类型【业务层自定义】例如：1活动即将开始提醒、2活动开始提醒、3活动即将结束提醒、4活动结束提醒、5活动获奖提醒、6券即将生效提醒、7券的生效提醒、8券的失效提醒、9券即将失效提醒、10券核销提醒、8192系统通知、
}

// sysMessageColumns holds the columns for table sys_message.
var sysMessageColumns = SysMessageColumns{
	Id:             "id",
	Title:          "title",
	Summary:        "summary",
	Content:        "content",
	Type:           "type",
	Link:           "link",
	ToUserIds:      "to_user_ids",
	ToUserType:     "to_user_type",
	FromUserId:     "from_user_id",
	FromUserType:   "from_user_type",
	SendAt:         "send_at",
	ExtJson:        "ext_json",
	ReadUserIds:    "read_user_ids",
	DataIdentifier: "data_identifier",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
	SceneDesc:      "scene_desc",
	SceneType:      "scene_type",
}

// NewSysMessageDao creates and returns a new DAO object for table data access.
func NewSysMessageDao(proxy ...dao_interface.IDao) *SysMessageDao {
	var dao *SysMessageDao
	if len(proxy) > 0 {
		dao = &SysMessageDao{
			group:       proxy[0].Group(),
			table:       proxy[0].Table(),
			columns:     sysMessageColumns,
			daoConfig:   proxy[0].DaoConfig(context.Background()),
			IDao:        proxy[0].DaoConfig(context.Background()).Dao,
			ignoreCache: proxy[0].DaoConfig(context.Background()).IsIgnoreCache(),
			exWhereArr:  proxy[0].DaoConfig(context.Background()).Dao.GetExtWhereKeys(),
		}

		return dao
	}

	return &SysMessageDao{
		group:   "default",
		table:   "sys_message",
		columns: sysMessageColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SysMessageDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SysMessageDao) Table() string {
	return dao.table
}

// Group returns the configuration group name of database of current dao.
func (dao *SysMessageDao) Group() string {
	return dao.group
}

// Columns returns all column names of current dao.
func (dao *SysMessageDao) Columns() SysMessageColumns {
	return dao.columns
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SysMessageDao) Ctx(ctx context.Context, cacheOption ...*gdb.CacheOption) *gdb.Model {
	return dao.DaoConfig(ctx, cacheOption...).Model
}

func (dao *SysMessageDao) DaoConfig(ctx context.Context, cacheOption ...*gdb.CacheOption) *dao_interface.DaoConfig {
	//if dao.daoConfig != nil && len(dao.exWhereArr) == 0 {
	//	return dao.daoConfig
	//}

	var daoConfig = daoctl.NewDaoConfig(ctx, dao, cacheOption...)
	dao.daoConfig = &daoConfig

	if len(dao.exWhereArr) > 0 {
		daoConfig.IgnoreExtModel(dao.exWhereArr...)
		dao.exWhereArr = []string{}

	}

	if dao.ignoreCache {
		daoConfig.IgnoreCache()
	}

	return dao.daoConfig
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SysMessageDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}

func (dao *SysMessageDao) GetExtWhereKeys() []string {
	return dao.exWhereArr
}

func (dao *SysMessageDao) IsIgnoreCache() bool {
	return dao.ignoreCache
}

func (dao *SysMessageDao) IgnoreCache() dao_interface.IDao {
	dao.ignoreCache = true
	return dao
}
func (dao *SysMessageDao) IgnoreExtModel(whereKey ...string) dao_interface.IDao {
	dao.exWhereArr = append(dao.exWhereArr, whereKey...)
	return dao
}
