name: Kysion Admin Community 发布

on:
    push:
        # 匹配标签序列
        tags:
            - 'v*' # 匹配 v* 格式的标签，例如 v1.0, v20.15.10

env:
    TZ: Asia/Shanghai

jobs:
    build:
        name: 构建与发布
        runs-on: ubuntu-latest
        steps:
            - name: 检出代码
              uses: actions/checkout@v3

            - name: 设置 Go 环境
              uses: actions/setup-go@v4
              with:
                  go-version: 1.24.0

            - name: 构建全平台二进制文件
              run: |
                  # 定义目标平台
                  PLATFORMS="linux/amd64 windows/amd64 darwin/amd64 darwin/arm64"
                  # 源文件
                  SOURCE_FILE="example/main.go"
                  # 输出基础目录
                  OUTPUT_DIR="temp"
                  # 二进制文件名
                  BINARY_NAME="ky-admin-community"
                  # 资源文件目录
                  RESOURCES="example/resource example/i18n example/manifest example/.env.example"

                  echo "正在为以下平台构建: $PLATFORMS"

                  for PLATFORM in $PLATFORMS; do
                      # 将平台分割为操作系统和架构
                      GOOS=${PLATFORM%/*}
                      GOARCH=${PLATFORM#*/}
                      # 确定输出路径和可能的后缀
                      OUTPUT_PATH="$OUTPUT_DIR/${GOOS}_${GOARCH}"
                      BINARY_FILENAME="$BINARY_NAME"
                      if [ "$GOOS" = "windows" ]; then
                          BINARY_FILENAME="${BINARY_NAME}.exe"
                      fi
                      FINAL_OUTPUT="$OUTPUT_PATH/$BINARY_FILENAME"

                      echo "正在构建 $GOOS/$GOARCH..."
                      # 创建目标目录
                      mkdir -p "$OUTPUT_PATH"
                      # 构建二进制文件
                      env GOOS=$GOOS GOARCH=$GOARCH CGO_ENABLED=0 go build -ldflags="-s -w" -o "$FINAL_OUTPUT" "$SOURCE_FILE"
                      if [ $? -ne 0 ]; then
                          echo "构建失败: $GOOS/$GOARCH"
                          exit 1
                      fi
                      echo "已构建: $FINAL_OUTPUT"

                      # 复制资源文件
                      echo "正在复制资源文件到 $OUTPUT_PATH..."
                      for RESOURCE in $RESOURCES; do
                          if [ -d "$RESOURCE" ] || [ -f "$RESOURCE" ]; then
                              cp -R "$RESOURCE" "$OUTPUT_PATH/"
                              echo "已复制: $RESOURCE"
                          else
                              echo "警告: 资源文件不存在: $RESOURCE"
                          fi
                      done

                      # 打包发布文件
                      echo "正在为 $GOOS/$GOARCH 创建发布包..."
                      if [ "$GOOS" = "windows" ]; then
                          # Windows 平台使用 zip 格式
                          ZIP_NAME="$OUTPUT_DIR/${BINARY_NAME}_${GOOS}_${GOARCH}.zip"
                          echo "正在创建 ZIP 包: $ZIP_NAME"
                          (cd "$OUTPUT_DIR" && zip -rq "../$ZIP_NAME" "${GOOS}_${GOARCH}")
                          echo "已创建 ZIP 包: $ZIP_NAME"
                      else
                          # 其他平台使用 tar.gz 格式
                          TAR_NAME="$OUTPUT_DIR/${BINARY_NAME}_${GOOS}_${GOARCH}.tar.gz"
                          echo "正在创建 TAR.GZ 包: $TAR_NAME"
                          (cd "$OUTPUT_DIR" && tar -czf "../$TAR_NAME" "${GOOS}_${GOARCH}")
                          echo "已创建 TAR.GZ 包: $TAR_NAME"
                      fi
                  done

                  echo "所有平台构建完成。"

                  # 清理临时文件
                  echo "正在清理临时文件..."
                  for PLATFORM in $PLATFORMS; do
                      GOOS=${PLATFORM%/*}
                      GOARCH=${PLATFORM#*/}
                      BUILD_DIR="$OUTPUT_DIR/${GOOS}_${GOARCH}"
                      if [ -d "$BUILD_DIR" ]; then
                          echo "正在删除临时目录: $BUILD_DIR"
                          rm -rf "$BUILD_DIR"
                      fi
                  done
                  echo "清理完成。"

            - name: 创建 GitHub Release 并上传产物
              id: create_release
              uses: softprops/action-gh-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  name: Kysion Admin Community 发布 ${{ github.ref }}
                  draft: false
                  prerelease: false
                  files: temp/*.zip temp/*.tar.gz # 只上传压缩包文件
